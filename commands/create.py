from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from telegram.ext import (
    CallbackContext,
    ConversationHandler
)

from classes.bot import Bot
from classes.event import Event
from classes.pyson import Pyson
from classes.command import Command

from config import EVENTS_FILE
from commands.back import BACK_COMMAND


def create(
    update: Update,
    context: CallbackContext
) -> int:
    message = update.message
    show_message = Bot.edit_previous_message

    if "state" in context.user_data.keys():
        response = ""
        state = context.user_data["state"]

        if state in ["title", "date", "time", "place", "description"]:
            context.user_data[state] = message.text
            response = f" <b>{message.text}</b>"
        elif state == "url":
            urls = list(message.parse_entities("url").values())

            if urls:
                url = urls[0]
                context.user_data[state] = url
                response = f" <b><a href='{url}'>—Å—Å—ã–ª–∫–∞</a></b>"
        elif state == "thumbnail":
            if Event.download_photo(update, context):
                response = " <b>–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>"

        if response:
            state = CREATE_COMMAND.next_state(state)
            response = Bot.messages[-1].text + response

            show_message(update, context, response)
        else:
            show_message(
                update, context,
                CREATE_COMMAND.states["error"]
            )

        show_message = Bot.send_message
    else:
        state = CREATE_COMMAND.next_state()
        context.user_data["id"] = Event.generate_id()

    context.user_data["state"] = state

    show_message(
        update, context,
        CREATE_COMMAND.states[state],
        CREATE_COMMAND.markup
    )

    if state == "success":
        id = Event.save(update, context)
        Event.publish(update, context, id)

        return ConversationHandler.END

    return CREATE_COMMAND.id


CREATE_COMMAND = Command(
    callback=create,
    description="‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",

    states={
        "title": "üîñ –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ",
        "date": "üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ",
        "time": "üïò –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ",
        "place": "üåç –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ",
        "description": "üìù –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ",
        "url": "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: ",
        "thumbnail": "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ",

        "success": "‚úÖ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>",
        "error": "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!</b>"
    },

    markup=InlineKeyboardMarkup([
        [InlineKeyboardButton(
            text=BACK_COMMAND.description,
            callback_data=BACK_COMMAND.name
        )]
    ])
)
