from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from telegram.ext import (
    CallbackContext,
    ConversationHandler
)

from classes.bot import Bot
from classes.event import Event
from classes.command import Command

from commands.back import BACK_COMMAND


def create(
    update: Update,
    context: CallbackContext
) -> int:
    message = update.message

    if "state" in context.user_data.keys():
        state = context.user_data["state"]

        if state in ["title", "date", "time", "place", "description"]:
            context.user_data[state] = message.text
        elif state in ["url", "hashtag"]:
            entities = message.parse_entities(state).values()
            context.user_data[state] = list(entities)
        elif state == "thumbnail":
            context.user_data[state] = Event.download_photo(update, context)

        if context.user_data[state]:
            state = CREATE_COMMAND.next_state(state)
        else:
            Bot.send_message(
                update, context,
                CREATE_COMMAND.states["error"]
            )
    else:
        context.user_data["id"] = Event.generate_id()
        state = CREATE_COMMAND.next_state()

    context.user_data["state"] = state

    if state == "success":
        Event.publish(update, context)

        Bot.send_message(
            update, context,
            CREATE_COMMAND.states[state],
            CREATE_COMMAND.markup
        )

        return ConversationHandler.END

    Bot.send_message(
        update, context,
        CREATE_COMMAND.states[state]
    )

    return CREATE_COMMAND.id


CREATE_COMMAND = Command(
    callback=create,
    description="‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",

    states={
        "title": "üîñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ",
        "date": "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ",
        "time": "üïò –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ",
        "place": "üåç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ",
        "description": "üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ",
        "url": "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ",
        "thumbnail": "üñºÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ",
        "hashtag": "#Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ",

        "success": "‚úÖ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤–æ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –±–æ—Ç—É –∫–∞–Ω–∞–ª–∞—Ö!</b>",
        "error": "‚ùå <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö!</b>"
    },

    markup=InlineKeyboardMarkup([
        [InlineKeyboardButton(
            text=BACK_COMMAND.description,
            callback_data=BACK_COMMAND.name
        )]
    ])
)
